// This file was generated by GenerateAst
#pragma once
#include "../Types/Token.h"
#include "Expr.h"

using namespace lox;

class ExpressionStmt;
class PrintStmt;
class VarStmt;
class BlockStmt;
class IfStmt;
class WhileStmt;
class FunctionStmt;
class ReturnStmt;

class StmtVisitor {
public:
	virtual ~StmtVisitor() = default;
	virtual void visit(ExpressionStmt* stmt) = 0;
	virtual void visit(PrintStmt* stmt) = 0;
	virtual void visit(VarStmt* stmt) = 0;
	virtual void visit(BlockStmt* stmt) = 0;
	virtual void visit(IfStmt* stmt) = 0;
	virtual void visit(WhileStmt* stmt) = 0;
	virtual void visit(FunctionStmt* stmt) = 0;
	virtual void visit(ReturnStmt* stmt) = 0;
};
class Stmt {
public:
	virtual ~Stmt() = default;
	virtual void accept(StmtVisitor* visitor) = 0;
};

class FunctionStmt : public Stmt {
public:
    Types::Token name;
    std::vector<Types::Token> params;
    std::vector<Stmt*> body;

	FunctionStmt(Types::Token name, std::vector<Types::Token> params, std::vector<Stmt*> body) :
        name(name), params(params), body(body)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class BlockStmt : public Stmt {
public:
    std::vector<Stmt*> statements;

	BlockStmt(std::vector<Stmt*> statements) :
		statements(statements)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class IfStmt : public Stmt {
public:
	Expr* condition;
    Stmt* thenBranch;
    Stmt* elseBranch;

	IfStmt(Expr* condition, Stmt* thenBranch, Stmt* elseBranch) :
        condition(condition), thenBranch(thenBranch), elseBranch(elseBranch)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class WhileStmt : public Stmt {
public:
	Expr* condition;
    Stmt* body;

	WhileStmt(Expr* condition, Stmt* body) :
        condition(condition), body(body)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class ExpressionStmt : public Stmt {
public:
	Expr* expr;

	ExpressionStmt(Expr* expr) :
		expr(expr)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class PrintStmt : public Stmt {
public:
	Expr* expr;

	PrintStmt(Expr* expr) :
		expr(expr)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class ReturnStmt : public Stmt {
public:
    Types::Token keyword;
	Expr* expr;

	ReturnStmt(Types::Token keyword, Expr* expr) :
		keyword(keyword), expr(expr)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};

class VarStmt : public Stmt {
public:
    Types::Token name;
	Expr* init;

	VarStmt(Types::Token token, Expr* expr = nullptr) :
		name(token), init(expr)
	{ }
	void accept(StmtVisitor* visitor) override {
		visitor->visit(this);
	};
};
